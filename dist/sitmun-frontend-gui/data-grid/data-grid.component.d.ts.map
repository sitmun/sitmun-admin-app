{"version":3,"file":"data-grid.component.d.ts","sources":["data-grid.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit, EventEmitter, ElementRef } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ColumnApi, Module } from '@ag-grid-community/all-modules';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nexport declare class DataGridComponent implements OnInit {\r\n    dialog: MatDialog;\r\n    translate: TranslateService;\r\n    private elRef;\r\n    _eventRefreshSubscription: any;\r\n    _eventGetSelectedRowsSubscription: any;\r\n    _eventGetAllRowsSubscription: any;\r\n    _eventSaveAgGridStateSubscription: any;\r\n    _eventModifyStatusOfSelectedCells: any;\r\n    modules: Module[];\r\n    UndeRedoActions: any;\r\n    searchValue: string;\r\n    gridApi: any;\r\n    gridColumnApi: any;\r\n    statusColumn: boolean;\r\n    someColumnIsEditable: boolean;\r\n    changesMap: Map<number, Map<string, number>>;\r\n    params: any;\r\n    rowData: any[];\r\n    changeCounter: number;\r\n    previousChangeCounter: number;\r\n    redoCounter: number;\r\n    modificationChange: boolean;\r\n    undoNoChanges: boolean;\r\n    gridOptions: any;\r\n    someStatusHasChangedToDelete: boolean;\r\n    eventRefreshSubscription: Observable<boolean>;\r\n    eventGetSelectedRowsSubscription: Observable<boolean>;\r\n    eventGetAllRowsSubscription: Observable<string>;\r\n    eventSaveAgGridStateSubscription: Observable<boolean>;\r\n    eventModifyStatusOfSelectedCells: Observable<string>;\r\n    eventAddItemsSubscription: Observable<boolean>;\r\n    frameworkComponents: any;\r\n    components: any;\r\n    columnDefs: any[];\r\n    getAll: () => Observable<any>;\r\n    discardChangesButton: boolean;\r\n    discardNonReverseStatus: boolean;\r\n    id: any;\r\n    undoButton: boolean;\r\n    defaultColumnSorting: string;\r\n    redoButton: boolean;\r\n    applyChangesButton: boolean;\r\n    deleteButton: boolean;\r\n    newButton: boolean;\r\n    actionButton: boolean;\r\n    addButton: boolean;\r\n    registerButton: boolean;\r\n    newStatusRegister: string;\r\n    globalSearch: boolean;\r\n    changeHeightButton: boolean;\r\n    defaultHeight: any;\r\n    themeGrid: any;\r\n    singleSelection: boolean;\r\n    nonEditable: boolean;\r\n    title: string;\r\n    hideExportButton: boolean;\r\n    hideDuplicateButton: boolean;\r\n    hideSearchReplaceButton: boolean;\r\n    addFieldRestriction: any;\r\n    allNewElements: any;\r\n    currentData: Array<any>;\r\n    fieldRestrictionWithDifferentName: string;\r\n    remove: EventEmitter<any[]>;\r\n    new: EventEmitter<number>;\r\n    add: EventEmitter<any[]>;\r\n    discardChanges: EventEmitter<any[]>;\r\n    sendChanges: EventEmitter<any[]>;\r\n    duplicate: EventEmitter<any[]>;\r\n    getSelectedRows: EventEmitter<any[]>;\r\n    getAllRows: EventEmitter<{\r\n        data: any[];\r\n        event: string;\r\n    }>;\r\n    getAgGridState: EventEmitter<any[]>;\r\n    gridModified: EventEmitter<boolean>;\r\n    constructor(dialog: MatDialog, translate: TranslateService, elRef: ElementRef);\r\n    ngOnInit(): void;\r\n    firstDataRendered(): void;\r\n    onGridReady(params: any): void;\r\n    getDatePicker(): () => void;\r\n    areRowsSelected(): Boolean;\r\n    emitSelectedRows(): void;\r\n    emitAllRows(event: string): void;\r\n    private getAllCurrentData;\r\n    modifyStatusSelected(status?: string): void;\r\n    saveAgGridState(): void;\r\n    removeAgGridState(): void;\r\n    getColumnKeysAndHeaders(columnkeys: Array<any>): String;\r\n    exportData(): void;\r\n    quickSearch(): void;\r\n    getElements(): void;\r\n    setSize(): void;\r\n    addItems(newItems: any[]): void;\r\n    private checkElementAllowedToAdd;\r\n    changeHeight(value: any): void;\r\n    removeData(): void;\r\n    newData(): void;\r\n    onAddButtonClicked(): void;\r\n    onDuplicateButtonClicked(): void;\r\n    applyChanges(): void;\r\n    deleteChanges(): void;\r\n    onFilterModified(): void;\r\n    undo(): void;\r\n    redo(): void;\r\n    onCellEditingStopped(e: any): void;\r\n    onCellValueChanged(params: any): void;\r\n    modificationWithoutChanges(params: any): void;\r\n    getColumnIndexByColId(api: ColumnApi, colId: string): number;\r\n    paintCells(params: any, changesMap: Map<number, Map<string, number>>): void;\r\n}\r\n"]}
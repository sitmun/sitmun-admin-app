import { Component, ViewChild, ElementRef, Input } from '@angular/core';
import * as d3 from 'd3';
export class DatagraphComponent {
    constructor() {
        this.margin = { top: 20, bottom: 60, left: 40, right: 40 };
        this.margin2 = 80;
    }
    ngOnInit() {
        if (this.type == "bar") {
            this.createBarChart();
            if (this.data) {
                this.updateBarChart();
            }
        }
    }
    ngOnChanges() {
        if (this.type == "bar") {
            if (this.chart) {
                this.updateBarChart();
            }
        }
    }
    createBarChart() {
        let element = this.chartContainer.nativeElement;
        this.width = element.offsetWidth - this.margin.left - this.margin.right;
        this.height = element.offsetHeight - this.margin.top - this.margin.bottom;
        let svg = d3.select(element).append('svg')
            .attr('width', '100%')
            .attr("height", '100%');
        // chart plot area
        this.chart = svg.append('g')
            .attr('class', 'bars')
            .attr('transform', `translate(${this.margin.left}, ${this.margin.top})`);
        const barGroups = this.chart.selectAll()
            .data(this.data)
            .enter()
            .append('g');
        // define X & Y domains
        let xDomain = this.data.map(d => d.index);
        let yDomain = [0, (d3.max(this.data, d => d.value))];
        // create scales
        this.xScale = d3.scaleBand().padding(0.3).domain(xDomain).rangeRound([0, this.width]);
        this.yScale = d3.scaleLinear().domain(yDomain).range([this.height, 0]);
        // bar colors
        // this.colors = d3.scaleLinear().domain([0, this.data.length]).range(<any[]>['red', 'blue']);
        barGroups
            .append('text')
            .attr('class', 'value')
            .attr('x', (a) => this.xScale(a.index) + this.xScale.bandwidth() / 2)
            .attr('y', (a) => this.yScale(a.value) - 5)
            .attr('text-anchor', 'middle')
            .style("font-size", 9)
            .style("fill", "black")
            .text((a) => `${a.value}`);
        // x & y axis
        this.xAxis = svg.append('g')
            .attr('class', 'axis axis-x')
            .attr('transform', `translate(${this.margin.left}, ${this.margin.top + this.height})`)
            .call(d3.axisBottom(this.xScale))
            .selectAll("text")
            .attr("transform", "translate(-10,0)rotate(-45)")
            .style("text-anchor", "end")
            .style("font-size", 9)
            .style("fill", "black");
        this.yAxis = svg.append('g')
            .attr('class', 'axis axis-y')
            .attr('transform', `translate(${this.margin.left}, ${this.margin.top})`)
            .call(d3.axisLeft(this.yScale))
            .selectAll("text")
            .style("font-size", 9)
            .style("fill", "black");
    }
    updateBarChart() {
        // update scales & axis
        this.xScale.domain(this.data.map(d => d.index));
        this.yScale.domain([0, (d3.max(this.data, d => d.value))]);
        this.xAxis.transition().call(d3.axisBottom(this.xScale));
        this.yAxis.transition().call(d3.axisLeft(this.yScale));
        let update = this.chart.selectAll('.bar')
            .data(this.data);
        // remove exiting bars
        update.exit().remove();
        // update existing bars
        this.chart.selectAll('.bar').transition()
            .attr('x', d => this.xScale(d.index))
            .attr('y', d => this.yScale(d.value))
            .attr('width', d => this.xScale.bandwidth())
            .attr('height', d => this.height - this.yScale(d[1]))
            .style('fill', '#be7d27');
        // add new bars
        update
            .enter()
            .append('rect')
            .attr('class', 'bar')
            .attr('x', d => this.xScale(d.index))
            .attr('y', d => this.yScale(d.value))
            .attr('height', d => this.height - this.yScale(d.value))
            .attr('width', this.xScale.bandwidth())
            .style('fill', '#be7d27')
            .transition()
            .delay((d, i) => i * 10);
    }
}
DatagraphComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-datagraph',
                template: "<div class=\"d3-chart\" #chart></div>",
                styles: [".d3-chart{width:100%;height:400px;margin:auto;background-color:rgba(189,185,181,.6156862745)}.d3-chart .axis line,.d3-chart .axis path{stroke:#999}.d3-chart .axis text{fill:#999}body{font-family:Open Sans,sans-serif}div#layout{text-align:center}svg{width:100%;height:100%}.bar{fill:#be7d27}text{font-size:8px!important;fill:#fff}line,path{stroke:grey}line#limit{stroke:#fed966;stroke-width:3;stroke-dasharray:3 6}.grid path{stroke-width:0}.grid .tick line{stroke:#9faaae;stroke-opacity:.3}text.divergence{font-size:12px;fill:#2f4a6d}.bars.value{font-size:8px!important;z-index:132132132}text.title{font-size:22px;font-weight:600}text.label{font-weight:400}text.label,text.source{font-size:8px!important}"]
            },] }
];
/** @nocollapse */
DatagraphComponent.ctorParameters = () => [];
DatagraphComponent.propDecorators = {
    chartContainer: [{ type: ViewChild, args: ['chart', { static: true },] }],
    data: [{ type: Input }],
    type: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyYXBoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tYWluL2FuZ3VsYXItbGlicmFyeS9wcm9qZWN0cy9zaXRtdW4tZnJvbnRlbmQtZ3VpL3NyYy9saWIvZGF0YS1ncmFwaC9kYXRhZ3JhcGguY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQXFCLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUM5RyxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQVF6QixNQUFNLE9BQU8sa0JBQWtCO0lBZ0I3QjtRQVhRLFdBQU0sR0FBUSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUMsQ0FBQztRQUMxRCxZQUFPLEdBQUcsRUFBRSxDQUFDO0lBVUwsQ0FBQztJQUVqQixRQUFRO1FBRUosSUFBRyxJQUFJLENBQUMsSUFBSSxJQUFJLEtBQUssRUFBQztZQUNwQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdEIsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNiLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQzthQUN2QjtTQUNGO0lBRUwsQ0FBQztJQUdELFdBQVc7UUFDVCxJQUFHLElBQUksQ0FBQyxJQUFJLElBQUksS0FBSyxFQUNyQjtZQUNFLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDZCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDdkI7U0FDRjtJQUdILENBQUM7SUFFRCxjQUFjO1FBQ1osSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUM7UUFDaEQsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxN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QUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNwRCxLQUFLLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRTVCLGVBQWU7UUFDZixNQUFNO2FBQ0gsS0FBSyxFQUFFO2FBQ1AsTUFBTSxDQUFDLE1BQU0sQ0FBQzthQUNkLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDO2FBQ3BCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNwQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDcEMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdkQsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO2FBQ3RDLEtBQUssQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDO2FBQ3hCLFVBQVUsRUFBRTthQUNaLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQTtJQUU1QixDQUFDOzs7WUFqSkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6QixpREFBeUM7O2FBRTFDOzs7Ozs2QkFHRSxTQUFTLFNBQUMsT0FBTyxFQUFDLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQzttQkFDaEMsS0FBSzttQkFDTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIE9uQ2hhbmdlcywgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBJbnB1dCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xyXG5cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLWRhdGFncmFwaCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2RhdGFncmFwaC5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vZGF0YWdyYXBoLmNvbXBvbmVudC5zY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGFncmFwaENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ2NoYXJ0Jyx7c3RhdGljOiB0cnVlfSkgcHJpdmF0ZSBjaGFydENvbnRhaW5lcjogRWxlbWVudFJlZjtcclxuICBASW5wdXQoKSBwcml2YXRlIGRhdGE6IEFycmF5PGFueT47XHJcbiAgQElucHV0KCkgcHJpdmF0ZSB0eXBlO1xyXG4gIHByaXZhdGUgbWFyZ2luOiBhbnkgPSB7IHRvcDogMjAsIGJvdHRvbTogNjAsIGxlZnQ6IDQwLCByaWdodDogNDB9O1xyXG4gIHByaXZhdGUgbWFyZ2luMiA9IDgwO1xyXG4gIHByaXZhdGUgY2hhcnQ6IGFueTtcclxuICBwcml2YXRlIHdpZHRoOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBoZWlnaHQ6IG51bWJlcjtcclxuICBwcml2YXRlIHhTY2FsZTogYW55O1xyXG4gIHByaXZhdGUgeVNjYWxlOiBhbnk7XHJcbiAgcHJpdmF0ZSBjb2xvcnM6IGFueTtcclxuICBwcml2YXRlIHhBeGlzOiBhbnk7XHJcbiAgcHJpdmF0ZSB5QXhpczogYW55O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuXHJcbiAgICAgIGlmKHRoaXMudHlwZSA9PSBcImJhclwiKXtcclxuICAgICAgICB0aGlzLmNyZWF0ZUJhckNoYXJ0KCk7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YSkge1xyXG4gICAgICAgICAgdGhpcy51cGRhdGVCYXJDaGFydCgpOyBcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgfVxyXG4gIFxyXG5cclxuICBuZ09uQ2hhbmdlcygpIHtcclxuICAgIGlmKHRoaXMudHlwZSA9PSBcImJhclwiKVxyXG4gICAge1xyXG4gICAgICBpZiAodGhpcy5jaGFydCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlQmFyQ2hhcnQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgfVxyXG5cclxuICBjcmVhdGVCYXJDaGFydCgpIHtcclxuICAgIGxldCBlbGVtZW50ID0gdGhpcy5jaGFydENvbnRhaW5lci5uYXRpdmVFbGVtZW50O1xyXG4gICAgdGhpcy53aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB0aGlzLm1hcmdpbi5sZWZ0IC0gdGhpcy5tYXJnaW4ucmlnaHQ7XHJcbiAgICB0aGlzLmhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gdGhpcy5tYXJnaW4udG9wIC0gdGhpcy5tYXJnaW4uYm90dG9tO1xyXG4gICAgbGV0IHN2ZyA9IGQzLnNlbGVjdChlbGVtZW50KS5hcHBlbmQoJ3N2ZycpXHJcbiAgICAgIC5hdHRyKCd3aWR0aCcsICcxMDAlJylcclxuICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgJzEwMCUnKVxyXG5cclxuICAgIC8vIGNoYXJ0IHBsb3QgYXJlYVxyXG4gICAgdGhpcy5jaGFydCA9IHN2Zy5hcHBlbmQoJ2cnKVxyXG4gICAgICAuYXR0cignY2xhc3MnLCAnYmFycycpXHJcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7dGhpcy5tYXJnaW4ubGVmdH0sICR7dGhpcy5tYXJnaW4udG9wfSlgKTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGJhckdyb3VwcyA9IHRoaXMuY2hhcnQuc2VsZWN0QWxsKClcclxuICAgICAgLmRhdGEodGhpcy5kYXRhKVxyXG4gICAgICAuZW50ZXIoKVxyXG4gICAgICAuYXBwZW5kKCdnJylcclxuXHJcbiAgXHJcblxyXG4gICAgLy8gZGVmaW5lIFggJiBZIGRvbWFpbnNcclxuICAgIGxldCB4RG9tYWluID0gdGhpcy5kYXRhLm1hcChkID0+IGQuaW5kZXgpO1xyXG4gICAgbGV0IHlEb21haW4gPSBbMCwgKGQzLm1heCh0aGlzLmRhdGEsIGQgPT4gZC52YWx1ZSkpXTtcclxuXHJcbiAgICAvLyBjcmVhdGUgc2NhbGVzXHJcbiAgICB0aGlzLnhTY2FsZSA9IGQzLnNjYWxlQmFuZCgpLnBhZGRpbmcoMC4zKS5kb21haW4oeERvbWFpbikucmFuZ2VSb3VuZChbMCwgdGhpcy53aWR0aF0pO1xyXG4gICAgdGhpcy55U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbih5RG9tYWluKS5yYW5nZShbdGhpcy5oZWlnaHQsIDBdKTtcclxuXHJcbiAgICAvLyBiYXIgY29sb3JzXHJcbiAgIC8vIHRoaXMuY29sb3JzID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWzAsIHRoaXMuZGF0YS5sZW5ndGhdKS5yYW5nZSg8YW55W10+WydyZWQnLCAnYmx1ZSddKTtcclxuICAgIFxyXG4gICAgYmFyR3JvdXBzIFxyXG4gICAgICAuYXBwZW5kKCd0ZXh0JylcclxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3ZhbHVlJylcclxuICAgICAgLmF0dHIoJ3gnLCAoYSkgPT4gdGhpcy54U2NhbGUoYS5pbmRleCkgKyB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKSAvIDIpXHJcbiAgICAgIC5hdHRyKCd5JywgKGEpID0+IHRoaXMueVNjYWxlKGEudmFsdWUpLTUpXHJcbiAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxyXG4gICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgOSlcclxuICAgICAgLnN0eWxlKFwiZmlsbFwiLCBcImJsYWNrXCIpXHJcbiAgICAgIC50ZXh0KChhKSA9PiBgJHthLnZhbHVlfWApXHJcblxyXG5cclxuICAgIC8vIHggJiB5IGF4aXNcclxuICAgIHRoaXMueEF4aXMgPSBzdmcuYXBwZW5kKCdnJylcclxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2F4aXMgYXhpcy14JylcclxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt0aGlzLm1hcmdpbi5sZWZ0fSwgJHt0aGlzLm1hcmdpbi50b3AgKyB0aGlzLmhlaWdodH0pYClcclxuICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh0aGlzLnhTY2FsZSkpXHJcbiAgICAgIC5zZWxlY3RBbGwoXCJ0ZXh0XCIpXHJcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKC0xMCwwKXJvdGF0ZSgtNDUpXCIpXHJcbiAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwiZW5kXCIpXHJcbiAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLCA5KVxyXG4gICAgICAuc3R5bGUoXCJmaWxsXCIsIFwiYmxhY2tcIilcclxuXHJcbiAgICAgIFxyXG4gICAgdGhpcy55QXhpcyA9IHN2Zy5hcHBlbmQoJ2cnKVxyXG4gICAgICAuYXR0cignY2xhc3MnLCAnYXhpcyBheGlzLXknKVxyXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3RoaXMubWFyZ2luLmxlZnR9LCAke3RoaXMubWFyZ2luLnRvcH0pYClcclxuICAgICAgLmNhbGwoZDMuYXhpc0xlZnQodGhpcy55U2NhbGUpKVxyXG4gICAgICAuc2VsZWN0QWxsKFwidGV4dFwiKVxyXG4gICAgICAuc3R5bGUoXCJmb250LXNpemVcIiwgOSlcclxuICAgICAgLnN0eWxlKFwiZmlsbFwiLCBcImJsYWNrXCIpXHJcblxyXG4gICAgICBcclxuICB9XHJcblxyXG4gIHVwZGF0ZUJhckNoYXJ0KCkge1xyXG4gICAgLy8gdXBkYXRlIHNjYWxlcyAmIGF4aXNcclxuICAgIHRoaXMueFNjYWxlLmRvbWFpbih0aGlzLmRhdGEubWFwKGQgPT4gZC5pbmRleCkpO1xyXG4gICAgdGhpcy55U2NhbGUuZG9tYWluKFswLChkMy5tYXgodGhpcy5kYXRhLCBkID0+IGQudmFsdWUpKV0pO1xyXG4gICAgdGhpcy54QXhpcy50cmFuc2l0aW9uKCkuY2FsbChkMy5heGlzQm90dG9tKHRoaXMueFNjYWxlKSk7XHJcbiAgICB0aGlzLnlBeGlzLnRyYW5zaXRpb24oKS5jYWxsKGQzLmF4aXNMZWZ0KHRoaXMueVNjYWxlKSk7XHJcblxyXG4gICAgbGV0IHVwZGF0ZSA9IHRoaXMuY2hhcnQuc2VsZWN0QWxsKCcuYmFyJylcclxuICAgICAgLmRhdGEodGhpcy5kYXRhKTtcclxuXHJcbiAgICAvLyByZW1vdmUgZXhpdGluZyBiYXJzXHJcbiAgICB1cGRhdGUuZXhpdCgpLnJlbW92ZSgpO1xyXG5cclxuICAgIC8vIHVwZGF0ZSBleGlzdGluZyBiYXJzXHJcbiAgICB0aGlzLmNoYXJ0LnNlbGVjdEFsbCgnLmJhcicpLnRyYW5zaXRpb24oKVxyXG4gICAgICAuYXR0cigneCcsIGQgPT4gdGhpcy54U2NhbGUoZC5pbmRleCkpXHJcbiAgICAgIC5hdHRyKCd5JywgZCA9PiB0aGlzLnlTY2FsZShkLnZhbHVlKSlcclxuICAgICAgLmF0dHIoJ3dpZHRoJywgZCA9PiB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKSlcclxuICAgICAgLmF0dHIoJ2hlaWdodCcsIGQgPT4gdGhpcy5oZWlnaHQgLSB0aGlzLnlTY2FsZShkWzFdKSlcclxuICAgICAgLnN0eWxlKCdmaWxsJywgJyNiZTdkMjcnKTtcclxuXHJcbiAgICAvLyBhZGQgbmV3IGJhcnNcclxuICAgIHVwZGF0ZVxyXG4gICAgICAuZW50ZXIoKVxyXG4gICAgICAuYXBwZW5kKCdyZWN0JylcclxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2JhcicpXHJcbiAgICAgIC5hdHRyKCd4JywgZCA9PiB0aGlzLnhTY2FsZShkLmluZGV4KSlcclxuICAgICAgLmF0dHIoJ3knLCBkID0+IHRoaXMueVNjYWxlKGQudmFsdWUpKVxyXG4gICAgICAuYXR0cignaGVpZ2h0JywgZCA9PiB0aGlzLmhlaWdodCAtIHRoaXMueVNjYWxlKGQudmFsdWUpKVxyXG4gICAgICAuYXR0cignd2lkdGgnLCB0aGlzLnhTY2FsZS5iYW5kd2lkdGgoKSlcclxuICAgICAgLnN0eWxlKCdmaWxsJywgJyNiZTdkMjcnKVxyXG4gICAgICAudHJhbnNpdGlvbigpXHJcbiAgICAgIC5kZWxheSgoZCwgaSkgPT4gaSAqIDEwKVxyXG5cclxuICB9XHJcbn1cclxuIl19